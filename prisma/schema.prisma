// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}


enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  courses          Course[]
  videos           Video[]
  completedLessons UserLessonProgress[]


  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}


model Course {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  lessons     Lesson[]
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  isPublished   Boolean  @default(false)
}

model Lesson {
  id             Int                  @id @default(autoincrement())
  name           String
  description    String
  slug           String
  course         Course               @relation(fields: [courseId], references: [id])
  courseId       Int
  video          Video?
  usersCompleted UserLessonProgress[]
}

model Video {
  id                Int     @id @default(autoincrement())
  lesson            Lesson? @relation(fields: [lessonId], references: [id])
  lessonId          Int?    @unique
  owner             User    @relation(fields: [ownerId], references: [id])
  ownerId           String
  uploadId          String  @unique
  publicPlaybackId  String?
  privatePlaybackId String?
  duration          Float?
  aspectRatio       String?
  status            String  @default("preparing")
  posterTime        Float?
}

model UserLessonProgress {
  user        User     @relation(fields: [userId], references: [id])
  userId      String // relation scalar field (used in the `@relation` attribute above)
  lesson      Lesson   @relation(fields: [lessonId], references: [id])
  lessonId    Int // relation scalar field (used in the `@relation` attribute above)
  completedAt DateTime @default(now())

  @@id([userId, lessonId])
}